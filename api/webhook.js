const { google } = require('googleapis');

function todayVN_DDMMYYYY() {
  const fmt = new Intl.DateTimeFormat('vi-VN', {
    timeZone: 'Asia/Ho_Chi_Minh',
    day: '2-digit', month: '2-digit', year: 'numeric',
  });
  return fmt.format(new Date()); // v√≠ d·ª• "24/10/2025"
}

// ===== AI extract (Gemini) =====
// Ch√∫ √Ω: c·∫ßn GEMINI_API_KEY trong env
async function aiExtractExpense(text) {
  const { GoogleGenerativeAI } = await import('@google/generative-ai');
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  const model = genAI.getGenerativeModel({ model: 'models/gemini-2.5-flash' });

  const TODAY_VN = todayVN_DDMMYYYY();

  const prompt = `
Nhi·ªám v·ª•: Chu·∫©n ho√° tin nh·∫Øn chi ti√™u ti·∫øng Vi·ªát th√†nh JSON.

R√†ng bu·ªôc:
- M√∫i gi·ªù: Asia/Ho_Chi_Minh.
- TODAY_VN = "${TODAY_VN}" (ƒë·ªãnh d·∫°ng DD/MM/YYYY).
- N·∫øu c√≥ "H√¥m nay/H√¥m qua/H√¥m kia" th√¨ NGHIÃÉA B·∫ÆT BU·ªòC:
  * H√¥m nay  -> ch√≠nh l√† TODAY_VN
  * H√¥m qua  -> TODAY_VN - 1 ng√†y
  * H√¥m kia  -> TODAY_VN - 2 ng√†y
- N·∫øu l√† ng√†y tuy·ªát ƒë·ªëi (vd 1/1/2024, 10-10-2025, 01/01/2024) th√¨ gi·ªØ nguy√™n nh∆∞ng chu·∫©n ho√° th√†nh DD/MM/YYYY.
- amount: s·ªë nguy√™n VND. Quy t·∫Øc: 70k=70000; 1.5m=1500000; 2tr=2000000; "70.000"=70000; "70000 VND"=70000; "‚Ç´70.000"=70000.
- note: ph·∫ßn c√≤n l·∫°i (ghi ch√∫ m√¥ t·∫£).
- Ch·ªâ tr·∫£ v·ªÅ JSON DUY NH·∫§T theo schema sau, kh√¥ng th√™m ch·ªØ n√†o kh√°c:
{"date":"DD/MM/YYYY","note":"string","amount":number}

Tin nh·∫Øn: "${text}"
`.trim();

  const res = await model.generateContent({ contents: [{ role: 'user', parts: [{ text: prompt }] }] });
  const out = (res.response.text() || '').trim();
  const m = out.match(/\{[\s\S]*\}/);
  if (!m) throw new Error('AI did not return JSON');

  const data = JSON.parse(m[0]);
  // ƒë·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu t·ªëi thi·ªÉu
  if (!data || typeof data !== 'object') throw new Error('AI JSON invalid');
  if (typeof data.date !== 'string') data.date = '';
  if (typeof data.note !== 'string') data.note = '';
  if (typeof data.amount !== 'number') data.amount = Number(data.amount) || null;

  return data; // { date:"DD/MM/YYYY", note:"...", amount: 70000 }
}


module.exports = async (req, res) => {
    if (req.method !== 'POST') return res.status(200).send('ok');

    const wanted = process.env.TELEGRAM_SECRET_TOKEN;
    const got = req.headers['x-telegram-bot-api-secret-token'];
    if (wanted && got !== wanted) return res.status(403).send('forbidden');

    const update = req.body || {};
    const msg = update.message || update.edited_message;
    if (!msg) return res.status(200).send('ok');

    const text = msg.text || msg.caption || '';
    const chatId = msg.chat?.id ?? '';
    const userId = msg.from?.id ?? '';
    const username = msg.from?.username || `${msg.from?.first_name || ''} ${msg.from?.last_name || ''}`.trim();

        // --- ∆ØU TI√äN AI ---
    let dateFormatted = '';
    let note = '';
    let amount = null;

    const ai = await aiExtractExpense(text);
    if (ai && (ai.date || ai.amount || ai.note)) {
      // Chu·∫©n ho√° date b·∫±ng parser VN s·∫µn c√≥ c·ªßa b·∫°n ƒë·ªÉ lu√¥n ra DD/MM/YYYY
      const p = parseDateVN(ai.date || '', 'Asia/Ho_Chi_Minh');
      dateFormatted = p.formatted || '';
      note = (ai.note || '').trim();
      amount = (typeof ai.amount === 'number' && Number.isFinite(ai.amount)) ? ai.amount : null;
    }

    // --- FALLBACK th·ªß c√¥ng n·∫øu AI kh√¥ng ch·∫Øc ---
    if (!dateFormatted || amount === null || !note) {
      const parts = (text || '').split(',').map(s => s.trim());
      const dateRaw = parts[0] || '';
      const parsedDate = parseDateVN(dateRaw, 'Asia/Ho_Chi_Minh');
      const fallbackNote = parts[1] || '';
      const moneyRaw = parts[2] || '';
      const fallbackAmount = parseMoneyVN(moneyRaw);

      if (!dateFormatted) dateFormatted = parsedDate.formatted || '';
      if (!note) note = fallbackNote;
      if (amount === null) amount = fallbackAmount;
    }

    // --- Timestamp VN (UTC+7) gi·ªØ nguy√™n nh∆∞ b·∫°n ƒëang l√†m ---
    const nowVN = new Date(Date.now() + 7 * 60 * 60 * 1000);
    const timestampVN = nowVN.toISOString().replace('T', ' ').substring(0, 19);

    console.log('AI/date:', dateFormatted, '| note:', note, '| amount:', amount);

    console.log('Parsed date:', dateFormatted);
    console.log('Parsed note:', note);
    console.log('Parsed amount:', amount);

    // --- FIX: chu·∫©n ho√° private key ---
    const rawKey = process.env.GOOGLE_PRIVATE_KEY || '';
    const fixedKey = rawKey.includes('\\n') ? rawKey.replace(/\\n/g, '\n') : rawKey;

    try {
        console.log('‚öôÔ∏è Using service account email:', process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL);
        console.log('üîë Private key starts with:', fixedKey.slice(0, 40));

        // ‚úÖ D√πng object-form thay v√¨ positional args
        const auth = new google.auth.JWT({
            email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
            key: fixedKey,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });

        const token = await auth.authorize();
        console.log('‚úÖ Got access token (starts with):', token.access_token?.slice(0, 20));

        // Thay v√¨ hardcode
        const baUserId = parseInt(process.env.BA_USER_ID || '0', 10);
        
        const sheets = google.sheets({ version: 'v4', auth });
        await sheets.spreadsheets.values.append({
            spreadsheetId: process.env.SHEET_ID,
            range: `${process.env.SHEET_TAB || 'Sheet1'}!A:E`,
            valueInputOption: 'RAW',
            requestBody: {
                values: [
                    [timestampVN,
                    userId === baUserId ? 'Ba' : 'M·∫π',
                        dateFormatted,
                        note,
                    amount ?? '',
                    ]],
            },
        });

        console.log('‚úÖ Sheets append success');
    } catch (e) {
        console.error('‚ùå Sheets append error:', e?.response?.data || e.message);
    }

    return res.status(200).send('ok');
};

// ===== Date utils (VN) =====

/** L·∫•y y/m/d theo 1 timezone (m·∫∑c ƒë·ªãnh Asia/Ho_Chi_Minh) */
function getPartsInTZ(date = new Date(), timeZone = 'Asia/Ho_Chi_Minh') {
    const fmt = new Intl.DateTimeFormat('vi-VN', {
        timeZone,
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
    });
    // fmt.format -> "dd/mm/yyyy"
    const [d, m, y] = fmt.format(date).split('/');
    return { y: Number(y), m: Number(m), d: Number(d) };
}

/** T·∫°o Date (UTC) t∆∞∆°ng ·ª©ng v·ªõi yyyy-mm-dd trong timezone ch·ªâ ƒë·ªãnh (00:00 c·ªßa tz ƒë√≥) */
function dateFromYMDInTZ(y, m, d, timeZone = 'Asia/Ho_Chi_Minh') {
    // L·∫•y offset ch√™nh l·ªách tz so v·ªõi UTC t·∫°i th·ªùi ƒëi·ªÉm ƒë√≥ b·∫±ng c√°ch so 00:00 tz -> UTC
    // C√°ch an to√†n: t·∫°o chu·ªói ‚Äúdd/mm/yyyy 00:00‚Äù r·ªìi parse l·∫°i sang UTC b·∫±ng Intl.
    // Nh∆∞ng Node kh√¥ng parse locale string ‚Üí ta l·∫•y offset b·∫±ng c√°ch so 12:00 UTC.
    // Gi·∫£n l∆∞·ª£c: v√¨ Asia/Ho_Chi_Minh l√† UTC+7 kh√¥ng DST, c√≥ th·ªÉ d√πng tr·ª±c ti·∫øp:
    const utc = Date.UTC(y, m - 1, d, 0, 0, 0);
    // Asia/Ho_Chi_Minh l√† +7h
    return new Date(utc - 7 * 60 * 60 * 1000); // chuy·ªÉn v·ªÅ ‚Äú00:00 ·ªü VN‚Äù nh∆∞ m·ªôt m·ªëc chu·∫©n
}

/** Chu·∫©n ho√° ti·∫øng Vi·ªát b·ªè d·∫•u ƒë·ªÉ so s√°nh kho√° t·ª´ (h√¥m nay/qu√†/kia) */
function stripVN(s) {
    return s
        .normalize('NFD')
        .replace(/\p{Diacritic}/gu, '')
        .replace(/ƒë/gi, 'd')
        .toLowerCase();
}

/** Format DD/MM/YYYY (2 ch·ªØ s·ªë ng√†y/th√°ng) */
function fmtDDMMYYYY(y, m, d) {
    const dd = String(d).padStart(2, '0');
    const mm = String(m).padStart(2, '0');
    return `${dd}/${mm}/${y}`;
}

/**
 * Parse ng√†y t·ª´ chu·ªói ti·∫øng Vi·ªát:
 * - "H√¥m nay" / "H√¥m qua" / "H√¥m kia"
 * - "DD/MM/YYYY", "D/M/YYYY", "DD-MM-YYYY", "D-M-YYYY"
 * Tr·∫£ v·ªÅ { y, m, d, formatted } ho·∫∑c { error }
 */
function parseDateVN(input, timeZone = 'Asia/Ho_Chi_Minh') {
    if (!input || typeof input !== 'string') {
        return { error: 'empty' };
    }
    const raw = input.trim();
    const key = stripVN(raw);

    // 1) T·ª´ kho√° t∆∞∆°ng ƒë·ªëi
    if (key === 'hom nay') {
        const { y, m, d } = getPartsInTZ(new Date(), timeZone);
        return { y, m, d, formatted: fmtDDMMYYYY(y, m, d) };
    }
    if (key === 'hom qua') {
        const now = new Date();
        const { y, m, d } = getPartsInTZ(now, timeZone);
        const today = new Date(Date.UTC(y, m - 1, d)); // m·ªëc ng√†y (kh√¥ng gi·ªù)
        const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
        const p = getPartsInTZ(yesterday, timeZone);
        return { ...p, formatted: fmtDDMMYYYY(p.y, p.m, p.d) };
    }
    if (key === 'hom kia') {
        const now = new Date();
        const { y, m, d } = getPartsInTZ(now, timeZone);
        const today = new Date(Date.UTC(y, m - 1, d));
        const twoDaysAgo = new Date(today.getTime() - 2 * 24 * 60 * 60 * 1000);
        const p = getPartsInTZ(twoDaysAgo, timeZone);
        return { ...p, formatted: fmtDDMMYYYY(p.y, p.m, p.d) };
    }

    // 2) Ng√†y tuy·ªát ƒë·ªëi: dd/mm/yyyy | d/m/yyyy | dd-mm-yyyy | d-m-yyyy
    //   - NƒÉm b·∫Øt bu·ªôc 4 ch·ªØ s·ªë
    const mAbs = raw.match(/^(\d{1,2})[\/-](\d{1,2})[\/-](\d{4})$/);
    if (mAbs) {
        const d = Number(mAbs[1]);
        const m = Number(mAbs[2]);
        const y = Number(mAbs[3]);
        // Validate c∆° b·∫£n
        if (m < 1 || m > 12) return { error: 'month' };
        if (d < 1 || d > 31) return { error: 'day' };
        const test = new Date(y, m - 1, d);
        if (test.getFullYear() !== y || test.getMonth() !== m - 1 || test.getDate() !== d) {
            return { error: 'invalid-date' };
        }
        return { y, m, d, formatted: fmtDDMMYYYY(y, m, d) };
    }

    return { error: 'unrecognized' };
}

// ===== Money utils (VN) =====
function stripVN(s) {
    return (s || '')
        .toString()
        .normalize('NFD')
        .replace(/\p{Diacritic}/gu, '')
        .replace(/ƒë/gi, 'd')
        .toLowerCase();
}

/**
 * Tr·∫£ v·ªÅ s·ªë nguy√™n (VND) ho·∫∑c null n·∫øu kh√¥ng parse ƒë∆∞·ª£c.
 * H·ªó tr·ª£: 70000 | 70.000 | 70,000 | 70000vnd | ‚Ç´70.000 | 70k | 1m | 1.5m | 2tr | 2 trieu
 */
function parseMoneyVN(input) {
    if (input == null) return null;
    let s = stripVN(input).replace(/\s+/g, '');

    // B·ªè ƒë∆°n v·ªã ti·ªÅn t·ªá ph·ªï bi·∫øn
    s = s.replace(/vnd|vnƒë|vn|d|‚Ç´/g, '');

    // k / m / tr / trieu (c√≥ th·ªÉ c√≥ ph·∫ßn th·∫≠p ph√¢n, v√≠ d·ª• 1.5m)
    let m = s.match(/^([0-9]+(?:[.,][0-9]+)?)\s*([km]|tr|trieu)$/i);
    if (m) {
        const base = parseFloat(m[1].replace(',', '.'));
        const unit = m[2].toLowerCase();
        const mult =
            unit === 'k' ? 1_000 :
                unit === 'm' ? 1_000_000 :
                    (unit === 'tr' || unit === 'trieu') ? 1_000_000 : 1;
        return Math.round(base * mult);
    }

    // S·ªë thu·∫ßn c√≥ d·∫•u . , ngƒÉn c√°ch
    const digits = s.replace(/[^0-9]/g, '');
    if (!digits) return null;

    // Tr√°nh leading zeros v√¥ nghƒ©a: parseInt s·∫Ω x·ª≠ l√Ω
    return parseInt(digits, 10);
}
